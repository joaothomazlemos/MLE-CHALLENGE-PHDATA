name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  unit-testing:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
      
      - name: Run unit tests
        run: pytest tests/unit/ -v

  integration-testing:
    runs-on: ubuntu-latest
    needs: unit-testing
    services:
      docker:
        image: docker:dind
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python (only for model generation)
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
      
      - name: Build Docker containers
        run: |
          docker-compose -f docker-compose.scale.yml build --no-cache
      
      - name: Start Docker containers
        run: |
          docker-compose -f docker-compose.scale.yml up -d
          
      - name: Wait for containers to be ready
        run: |
          echo "Waiting for API to be ready..."
          timeout 60s bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done' || (echo "API failed to start" && docker-compose -f docker-compose.scale.yml logs && exit 1)
      
      - name: Run integration tests
        run: |
          # Run integration tests inside a temporary container with network access to the running services
          docker run --rm --network container:$(docker-compose -f docker-compose.scale.yml ps -q nginx) \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            python:3.11-slim bash -c "
              pip install --upgrade pip &&
              pip install pytest requests pandas numpy &&
              pytest tests/integration/ -v --log-cli-level=INFO
            "
      
      - name: Stop Docker containers
        if: always()
        run: |
          docker-compose -f docker-compose.scale.yml down